{"ast":null,"code":"import { HttpHeaders } from \"@angular/common/http\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./localstorage.service\";\nexport class AuthInterceptorService {\n  constructor(storage) {\n    this.storage = storage;\n  }\n  intercept(req, next) {\n    if (req.url === 'http://127.0.0.1:8000/api/user/token/') {\n      console.log(\"Header is not appended for getting token.\");\n      return next.handle(req);\n    } else {\n      let string_response = this.storage.get('Token');\n      let value = string_response.slice(string_response.indexOf(\":\") + 2, string_response.length - 2);\n      value = \"Token \" + value;\n      let header = new HttpHeaders();\n      header = header.set('Authorization', value);\n      console.log(\"Except for getting token, headers should be attached everywhere.\");\n      return next.handle(modifiedReq);\n    }\n  }\n}\nAuthInterceptorService.ɵfac = function AuthInterceptorService_Factory(t) {\n  return new (t || AuthInterceptorService)(i0.ɵɵinject(i1.LocalStorageService));\n};\nAuthInterceptorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthInterceptorService,\n  factory: AuthInterceptorService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAAA,SAAiCA,WAAW,QAAsC,sBAAsB;;;AAOxG,OAAM,MAAOC,sBAAsB;EAE/BC,YAAoBC,OAA4B;IAA5B,YAAO,GAAPA,OAAO;EAAwB;EAEnDC,SAAS,CAACC,GAAqB,EAAEC,IAAiB;IAE9C,IAAGD,GAAG,CAACE,GAAG,KAAG,uCAAuC,EAAE;MAClDC,OAAO,CAACC,GAAG,CAAC,2CAA2C,CAAC;MACxD,OAAOH,IAAI,CAACI,MAAM,CAACL,GAAG,CAAC;KAC1B,MAEI;MAED,IAAIM,eAAe,GAAG,IAAI,CAACR,OAAO,CAACS,GAAG,CAAC,OAAO,CAAE;MAEhD,IAAIC,KAAK,GAAGF,eAAe,CAACG,KAAK,CAACH,eAAe,CAACI,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,EAAEJ,eAAe,CAACK,MAAM,GAAC,CAAC,CAAC;MAC7FH,KAAK,GAAG,QAAQ,GAAGA,KAAK;MACxB,IAAII,MAAM,GAAG,IAAIjB,WAAW,EAAE;MAC9BiB,MAAM,GAAGA,MAAM,CAACC,GAAG,CAAC,eAAe,EAAEL,KAAK,CAAC;MAAaL,OAAO,CAACC,GAAG,CAAC,kEAAkE,CAAC;MAEvI,OAAOH,IAAI,CAACI,MAAM,CAACS,WAAW,CAAC;;EAMvC;;AA1BSlB,sBAAsB;mBAAtBA,sBAAsB;AAAA;AAAtBA,sBAAsB;SAAtBA,sBAAsB;EAAAmB,SAAtBnB,sBAAsB;EAAAoB,YADV;AAAM","names":["HttpHeaders","AuthInterceptorService","constructor","storage","intercept","req","next","url","console","log","handle","string_response","get","value","slice","indexOf","length","header","set","modifiedReq","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Devil\\Desktop\\BlogApp\\frontend\\BlogApp\\src\\app\\auth-interceptor.service.ts"],"sourcesContent":["import { HttpEvent, HttpHandler, HttpHeaders, HttpInterceptor, HttpRequest } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { Observable } from \"rxjs\";\r\nimport { LocalStorageService } from \"./localstorage.service\";\r\n\r\n\r\n@Injectable({providedIn: 'root'})\r\nexport class AuthInterceptorService implements HttpInterceptor {\r\n\r\n    constructor(private storage: LocalStorageService) {}\r\n\r\n    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n\r\n        if(req.url==='http://127.0.0.1:8000/api/user/token/') {\r\n            console.log(\"Header is not appended for getting token.\")\r\n            return next.handle(req);\r\n        }\r\n\r\n        else {\r\n\r\n            let string_response = this.storage.get('Token')!\r\n\r\n            let value = string_response.slice(string_response.indexOf(\":\") + 2, string_response.length-2)\r\n            value = \"Token \" + value\r\n            let header = new HttpHeaders()\r\n            header = header.set('Authorization', value);            console.log(\"Except for getting token, headers should be attached everywhere.\")\r\n\r\n            return next.handle(modifiedReq);\r\n\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}