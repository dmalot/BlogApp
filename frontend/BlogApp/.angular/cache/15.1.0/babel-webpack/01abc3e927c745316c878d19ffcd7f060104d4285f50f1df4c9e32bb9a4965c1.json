{"ast":null,"code":"import { HttpHeaders } from \"@angular/common/http\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./localstorage.service\";\nimport * as i2 from \"./auth.service\";\nexport class AuthInterceptorService {\n  constructor(storage, authService) {\n    this.storage = storage;\n    this.authService = authService;\n  }\n  intercept(req, next) {\n    if (req.url === 'http://127.0.0.1:8000/api/user/token/') {\n      console.log(\"Header is not appended for getting token.\");\n      return next.handle(req);\n    } else {\n      let string_response = this.storage.get('Token');\n      let header = new HttpHeaders();\n      header = header.set('Authorization', value);\n      console.log(\"Except for getting token, headers should be attached everywhere.\");\n      this.authService.user.subscribe(userData => {});\n      const modifiedReq = req.clone({\n        headers: header\n      });\n      return next.handle(modifiedReq);\n    }\n  }\n}\nAuthInterceptorService.ɵfac = function AuthInterceptorService_Factory(t) {\n  return new (t || AuthInterceptorService)(i0.ɵɵinject(i1.LocalStorageService), i0.ɵɵinject(i2.AuthService));\n};\nAuthInterceptorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthInterceptorService,\n  factory: AuthInterceptorService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAAA,SAAiCA,WAAW,QAAsC,sBAAsB;;;;AAQxG,OAAM,MAAOC,sBAAsB;EAE/BC,YAAoBC,OAA4B,EAC5BC,WAAwB;IADxB,YAAO,GAAPD,OAAO;IACP,gBAAW,GAAXC,WAAW;EAAgB;EAE/CC,SAAS,CAACC,GAAqB,EAAEC,IAAiB;IAE9C,IAAGD,GAAG,CAACE,GAAG,KAAG,uCAAuC,EAAE;MAClDC,OAAO,CAACC,GAAG,CAAC,2CAA2C,CAAC;MACxD,OAAOH,IAAI,CAACI,MAAM,CAACL,GAAG,CAAC;KAC1B,MAEI;MAED,IAAIM,eAAe,GAAG,IAAI,CAACT,OAAO,CAACU,GAAG,CAAC,OAAO,CAAE;MAGhD,IAAIC,MAAM,GAAG,IAAId,WAAW,EAAE;MAC9Bc,MAAM,GAAGA,MAAM,CAACC,GAAG,CAAC,eAAe,EAAEC,KAAK,CAAC;MAC3CP,OAAO,CAACC,GAAG,CAAC,kEAAkE,CAAC;MAE/E,IAAI,CAACN,WAAW,CAACa,IAAI,CAACC,SAAS,CAACC,QAAQ,IAAG,CAE3C,CAAC,CAAC;MAIF,MAAMC,WAAW,GAAGd,GAAG,CAACe,KAAK,CAAC;QAACC,OAAO,EAAER;MAAM,CAAC,CAAC;MAEhD,OAAOP,IAAI,CAACI,MAAM,CAACS,WAAW,CAAC;;EAMvC;;AAnCSnB,sBAAsB;mBAAtBA,sBAAsB;AAAA;AAAtBA,sBAAsB;SAAtBA,sBAAsB;EAAAsB,SAAtBtB,sBAAsB;EAAAuB,YADV;AAAM","names":["HttpHeaders","AuthInterceptorService","constructor","storage","authService","intercept","req","next","url","console","log","handle","string_response","get","header","set","value","user","subscribe","userData","modifiedReq","clone","headers","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Devil\\Desktop\\BlogApp\\frontend\\BlogApp\\src\\app\\auth-interceptor.service.ts"],"sourcesContent":["import { HttpEvent, HttpHandler, HttpHeaders, HttpInterceptor, HttpRequest } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { Observable } from \"rxjs\";\r\nimport { AuthService } from \"./auth.service\";\r\nimport { LocalStorageService } from \"./localstorage.service\";\r\n\r\n\r\n@Injectable({providedIn: 'root'})\r\nexport class AuthInterceptorService implements HttpInterceptor {\r\n\r\n    constructor(private storage: LocalStorageService,\r\n                private authService: AuthService) {}\r\n\r\n    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n\r\n        if(req.url==='http://127.0.0.1:8000/api/user/token/') {\r\n            console.log(\"Header is not appended for getting token.\")\r\n            return next.handle(req);\r\n        }\r\n\r\n        else {\r\n\r\n            let string_response = this.storage.get('Token')!\r\n\r\n            \r\n            let header = new HttpHeaders()\r\n            header = header.set('Authorization', value);\r\n            console.log(\"Except for getting token, headers should be attached everywhere.\")\r\n\r\n            this.authService.user.subscribe(userData => {\r\n\r\n            })\r\n\r\n\r\n\r\n            const modifiedReq = req.clone({headers: header})\r\n\r\n            return next.handle(modifiedReq);\r\n\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}