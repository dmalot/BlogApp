{"ast":null,"code":"import { BehaviorSubject, exhaustMap, take, tap } from 'rxjs';\nimport { User } from './models/user.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./localstorage.service\";\nimport * as i3 from \"@angular/router\";\nexport class AuthService {\n  constructor(http, storage, router) {\n    this.http = http;\n    this.storage = storage;\n    this.router = router;\n    this.user = new BehaviorSubject(null);\n    this.isLoggedIn = false;\n  }\n  autoLogin() {\n    const userData = JSON.parse(this.storage.get('userData'));\n    if (!userData) {\n      return;\n    }\n    const loadedUser = new User(userData.username, userData.email, userData.token);\n    this.user.next(loadedUser);\n    this.isLoggedIn = true;\n  }\n  userLogin(username, password) {\n    return this.http.post('http://127.0.0.1:8000/api/user/token/', {\n      username,\n      password\n    }).pipe(tap(resData => {\n      const user = new User(resData.username, resData.email, resData.token);\n      this.user.next(user);\n      this.storage.set('userData', JSON.stringify(resData));\n    })).subscribe(resData => {\n      console.log(resData);\n      this.isLoggedIn = true;\n      console.log('user is ' + this.isLoggedIn);\n      this.router.navigate(['home']);\n    });\n  }\n  userRegister(username, email, password) {\n    this.http.post('http://127.0.0.1:8000/api/user/create/', {\n      username,\n      email,\n      password\n    }).pipe(take(1), exhaustMap());\n    //   .subscribe((userData) => {\n    //     console.log('user created');\n    //   });\n    // this.http\n    //   .post('http://127.0.0.1:8000/api/user/token/', { username, password })\n    //   .pipe(\n    //     tap((resData: User) => {\n    //       const user = new User(resData.username, resData.email, resData.token);\n    //       console.log(user);\n    //       this.user.next(user);\n    //     })\n    //   );\n  }\n\n  userLogout() {\n    this.isLoggedIn = false;\n    this.user.next(null);\n    this.storage.remove('userData');\n    this.router.navigate(['/']);\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.LocalStorageService), i0.ɵɵinject(i3.Router));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac\n});","map":{"version":3,"mappings":"AAGA,SAASA,eAAe,EAAcC,UAAU,EAAEC,IAAI,EAAEC,GAAG,QAAQ,MAAM;AAEzE,SAASC,IAAI,QAAQ,qBAAqB;;;;;AAG1C,OAAM,MAAOC,WAAW;EAEtBC,YACUC,IAAgB,EAChBC,OAA4B,EAC5BC,MAAc;IAFd,SAAI,GAAJF,IAAI;IACJ,YAAO,GAAPC,OAAO;IACP,WAAM,GAANC,MAAM;IAJhB,SAAI,GAAG,IAAIT,eAAe,CAAO,IAAI,CAAC;IAStC,eAAU,GAAG,KAAK;EAJf;EAMHU,SAAS;IACP,MAAMC,QAAQ,GAIVC,IAAI,CAACC,KAAK,CAAC,IAAI,CAACL,OAAO,CAACM,GAAG,CAAC,UAAU,CAAC,CAAC;IAC5C,IAAI,CAACH,QAAQ,EAAE;MACb;;IAGF,MAAMI,UAAU,GAAG,IAAIX,IAAI,CAACO,QAAQ,CAACK,QAAQ,EAAEL,QAAQ,CAACM,KAAK,EAAEN,QAAQ,CAACO,KAAK,CAAC;IAC9E,IAAI,CAACC,IAAI,CAACC,IAAI,CAACL,UAAU,CAAC;IAC1B,IAAI,CAACM,UAAU,GAAG,IAAI;EACxB;EAEAC,SAAS,CAACN,QAAgB,EAAEO,QAAgB;IAC1C,OAAO,IAAI,CAAChB,IAAI,CACbiB,IAAI,CAAC,uCAAuC,EAAE;MAAER,QAAQ;MAAEO;IAAQ,CAAE,CAAC,CACrEE,IAAI,CACHtB,GAAG,CAAEuB,OAAa,IAAI;MACpB,MAAMP,IAAI,GAAG,IAAIf,IAAI,CAACsB,OAAO,CAACV,QAAQ,EAAEU,OAAO,CAACT,KAAK,EAAES,OAAO,CAACR,KAAK,CAAC;MACrE,IAAI,CAACC,IAAI,CAACC,IAAI,CAACD,IAAI,CAAC;MACpB,IAAI,CAACX,OAAO,CAACmB,GAAG,CAAC,UAAU,EAAEf,IAAI,CAACgB,SAAS,CAACF,OAAO,CAAC,CAAC;IACvD,CAAC,CAAC,CACH,CACAG,SAAS,CAAEH,OAAO,IAAI;MACrBI,OAAO,CAACC,GAAG,CAACL,OAAO,CAAC;MACpB,IAAI,CAACL,UAAU,GAAG,IAAI;MACtBS,OAAO,CAACC,GAAG,CAAC,UAAU,GAAG,IAAI,CAACV,UAAU,CAAC;MACzC,IAAI,CAACZ,MAAM,CAACuB,QAAQ,CAAC,CAAC,MAAM,CAAC,CAAC;IAChC,CAAC,CAAC;EACN;EAEAC,YAAY,CAACjB,QAAgB,EAAEC,KAAa,EAAEM,QAAgB;IAC5D,IAAI,CAAChB,IAAI,CACNiB,IAAI,CAAC,wCAAwC,EAAE;MAC9CR,QAAQ;MACRC,KAAK;MACLM;KACD,CAAC,CACDE,IAAI,CAACvB,IAAI,CAAC,CAAC,CAAC,EACbD,UAAU,EAAE,CAAC;IACf;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACF;;EAEAiC,UAAU;IACR,IAAI,CAACb,UAAU,GAAG,KAAK;IACvB,IAAI,CAACF,IAAI,CAACC,IAAI,CAAC,IAAI,CAAC;IACpB,IAAI,CAACZ,OAAO,CAAC2B,MAAM,CAAC,UAAU,CAAC;IAC/B,IAAI,CAAC1B,MAAM,CAACuB,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;EAE7B;;AA1EW3B,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAA+B,SAAX/B,WAAW;AAAA","names":["BehaviorSubject","exhaustMap","take","tap","User","AuthService","constructor","http","storage","router","autoLogin","userData","JSON","parse","get","loadedUser","username","email","token","user","next","isLoggedIn","userLogin","password","post","pipe","resData","set","stringify","subscribe","console","log","navigate","userRegister","userLogout","remove","factory"],"sourceRoot":"","sources":["C:\\Users\\Devil\\Desktop\\BlogApp\\frontend\\BlogApp\\src\\app\\auth.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { EventEmitter, Injectable, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { BehaviorSubject, catchError, exhaustMap, take, tap } from 'rxjs';\r\nimport { LocalStorageService } from './localstorage.service';\r\nimport { User } from './models/user.model';\r\n\r\n@Injectable()\r\nexport class AuthService {\r\n  user = new BehaviorSubject<User>(null);\r\n  constructor(\r\n    private http: HttpClient,\r\n    private storage: LocalStorageService,\r\n    private router: Router\r\n  ) {}\r\n\r\n\r\n\r\n  isLoggedIn = false;\r\n\r\n  autoLogin() {\r\n    const userData: {\r\n      email: string;\r\n      username: string;\r\n      token: string;\r\n    } = JSON.parse(this.storage.get('userData'));\r\n    if (!userData) {\r\n      return;\r\n    }\r\n\r\n    const loadedUser = new User(userData.username, userData.email, userData.token);\r\n    this.user.next(loadedUser);\r\n    this.isLoggedIn = true;\r\n  }\r\n\r\n  userLogin(username: string, password: string) {\r\n    return this.http\r\n      .post('http://127.0.0.1:8000/api/user/token/', { username, password })\r\n      .pipe(\r\n        tap((resData: User) => {\r\n          const user = new User(resData.username, resData.email, resData.token);\r\n          this.user.next(user);\r\n          this.storage.set('userData', JSON.stringify(resData));\r\n        })\r\n      )\r\n      .subscribe((resData) => {\r\n        console.log(resData);\r\n        this.isLoggedIn = true;\r\n        console.log('user is ' + this.isLoggedIn);\r\n        this.router.navigate(['home']);\r\n      });\r\n  }\r\n\r\n  userRegister(username: string, email: string, password: string) {\r\n    this.http\r\n      .post('http://127.0.0.1:8000/api/user/create/', {\r\n        username,\r\n        email,\r\n        password,\r\n      })\r\n      .pipe(take(1),\r\n      exhaustMap())\r\n    //   .subscribe((userData) => {\r\n    //     console.log('user created');\r\n    //   });\r\n    // this.http\r\n    //   .post('http://127.0.0.1:8000/api/user/token/', { username, password })\r\n    //   .pipe(\r\n    //     tap((resData: User) => {\r\n    //       const user = new User(resData.username, resData.email, resData.token);\r\n    //       console.log(user);\r\n    //       this.user.next(user);\r\n    //     })\r\n    //   );\r\n  }\r\n\r\n  userLogout() {\r\n    this.isLoggedIn = false;\r\n    this.user.next(null);\r\n    this.storage.remove('userData');\r\n    this.router.navigate(['/']);\r\n\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}