{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { exhaustMap, take } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./localstorage.service\";\nimport * as i2 from \"./auth.service\";\nexport class AuthInterceptorService {\n  constructor(storage, authService) {\n    this.storage = storage;\n    this.authService = authService;\n  }\n  intercept(req, next) {\n    if (req.url === 'http://127.0.0.1:8000/api/user/token/') {\n      // console.log(\"Header is not appended for getting token.\")\n      return next.handle(req);\n    } else {\n      // let string_response = this.storage.get('Token')!\n      // let value = string_response.slice(string_response.indexOf(\":\") + 2, string_response.length-2)\n      // value = \"Token \" + value\n      // let header = new HttpHeaders()\n      // header = header.set('Authorization', value);\n      console.log('Except for getting token, headers should be attached everywhere.');\n      //   this.authService.user.subscribe((userData) => {\n      //     // console.log(userData.token)\n      //     let header = new HttpHeaders();\n      //     let val = 'Token ' + userData.token;\n      //     header = header.set('Authorization', val);\n      //     console.log(header);\n      //     // console.log(userData.token);\n      //     const modifiedReq = req.clone({\n      //       headers: header\n      //     });\n      //     console.log(modifiedReq);\n      //     console.log(modifiedReq.headers.get('Authorization'))\n      //     return next.handle(modifiedReq);\n      //   });\n      return this.authService.user.pipe(take(1), exhaustMap(user => {\n        let header = new HttpHeaders();\n        let val = 'Token ' + user.getToken();\n        let temp = user.getToken();\n        temp = '34';\n        header = header.set('Authorization', val);\n        const modifiedReq = req.clone({\n          headers: header\n        });\n        return next.handle(modifiedReq);\n      }));\n    }\n  }\n}\nAuthInterceptorService.ɵfac = function AuthInterceptorService_Factory(t) {\n  return new (t || AuthInterceptorService)(i0.ɵɵinject(i1.LocalStorageService), i0.ɵɵinject(i2.AuthService));\n};\nAuthInterceptorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthInterceptorService,\n  factory: AuthInterceptorService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAAA,SAGEA,WAAW,QAGN,sBAAsB;AAE7B,SAASC,UAAU,EAAcC,IAAI,QAAQ,MAAM;;;;AAKnD,OAAM,MAAOC,sBAAsB;EACjCC,YACUC,OAA4B,EAC5BC,WAAwB;IADxB,YAAO,GAAPD,OAAO;IACP,gBAAW,GAAXC,WAAW;EAClB;EAEHC,SAAS,CACPC,GAAqB,EACrBC,IAAiB;IAEjB,IAAID,GAAG,CAACE,GAAG,KAAK,uCAAuC,EAAE;MACvD;MACA,OAAOD,IAAI,CAACE,MAAM,CAACH,GAAG,CAAC;KACxB,MAAM;MACL;MAEA;MACA;MACA;MAEA;MACAI,OAAO,CAACC,GAAG,CACT,kEAAkE,CACnE;MAED;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MAEA;MACA;MACA;MAEA;MAEA,OAAO,IAAI,CAACP,WAAW,CAACQ,IAAI,CACzBC,IAAI,CACHb,IAAI,CAAC,CAAC,CAAC,EACPD,UAAU,CAAEa,IAAI,IAAI;QAClB,IAAIE,MAAM,GAAG,IAAIhB,WAAW,EAAE;QAC9B,IAAIiB,GAAG,GAAG,QAAQ,GAAGH,IAAI,CAACI,QAAQ,EAAE;QACpC,IAAIC,IAAI,GAAGL,IAAI,CAACI,QAAQ,EAAE;QAC1BC,IAAI,GAAG,IAAI;QAEXH,MAAM,GAAGA,MAAM,CAACI,GAAG,CAAC,eAAe,EAAEH,GAAG,CAAC;QACzC,MAAMI,WAAW,GAAGb,GAAG,CAACc,KAAK,CAAC;UAC5BC,OAAO,EAAEP;SACV,CAAC;QACF,OAAOP,IAAI,CAACE,MAAM,CAACU,WAAW,CAAC;MACjC,CAAC,CAAC,CACH;;EAIP;;AA7DWlB,sBAAsB;mBAAtBA,sBAAsB;AAAA;AAAtBA,sBAAsB;SAAtBA,sBAAsB;EAAAqB,SAAtBrB,sBAAsB;EAAAsB,YADT;AAAM","names":["HttpHeaders","exhaustMap","take","AuthInterceptorService","constructor","storage","authService","intercept","req","next","url","handle","console","log","user","pipe","header","val","getToken","temp","set","modifiedReq","clone","headers","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Devil\\Desktop\\BlogApp\\frontend\\BlogApp\\src\\app\\auth-interceptor.service.ts"],"sourcesContent":["import {\r\n  HttpEvent,\r\n  HttpHandler,\r\n  HttpHeaders,\r\n  HttpInterceptor,\r\n  HttpRequest,\r\n} from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { exhaustMap, Observable, take } from 'rxjs';\r\nimport { AuthService } from './auth.service';\r\nimport { LocalStorageService } from './localstorage.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AuthInterceptorService implements HttpInterceptor {\r\n  constructor(\r\n    private storage: LocalStorageService,\r\n    private authService: AuthService\r\n  ) {}\r\n\r\n  intercept(\r\n    req: HttpRequest<any>,\r\n    next: HttpHandler\r\n  ): Observable<HttpEvent<any>> {\r\n    if (req.url === 'http://127.0.0.1:8000/api/user/token/') {\r\n      // console.log(\"Header is not appended for getting token.\")\r\n      return next.handle(req);\r\n    } else {\r\n      // let string_response = this.storage.get('Token')!\r\n\r\n      // let value = string_response.slice(string_response.indexOf(\":\") + 2, string_response.length-2)\r\n      // value = \"Token \" + value\r\n      // let header = new HttpHeaders()\r\n\r\n      // header = header.set('Authorization', value);\r\n      console.log(\r\n        'Except for getting token, headers should be attached everywhere.'\r\n      );\r\n\r\n      //   this.authService.user.subscribe((userData) => {\r\n      //     // console.log(userData.token)\r\n      //     let header = new HttpHeaders();\r\n      //     let val = 'Token ' + userData.token;\r\n      //     header = header.set('Authorization', val);\r\n      //     console.log(header);\r\n      //     // console.log(userData.token);\r\n      //     const modifiedReq = req.clone({\r\n      //       headers: header\r\n      //     });\r\n\r\n      //     console.log(modifiedReq);\r\n      //     console.log(modifiedReq.headers.get('Authorization'))\r\n      //     return next.handle(modifiedReq);\r\n\r\n      //   });\r\n\r\n      return this.authService.user\r\n        .pipe(\r\n          take(1),\r\n          exhaustMap((user) => {\r\n            let header = new HttpHeaders();\r\n            let val = 'Token ' + user.getToken();\r\n            let temp = user.getToken()\r\n            temp = '34'\r\n            \r\n            header = header.set('Authorization', val);\r\n            const modifiedReq = req.clone({\r\n              headers: header,\r\n            });\r\n            return next.handle(modifiedReq);\r\n          })\r\n        )\r\n\r\n    }\r\n\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}