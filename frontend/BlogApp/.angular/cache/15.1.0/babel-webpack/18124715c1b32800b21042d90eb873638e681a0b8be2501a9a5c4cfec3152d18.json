{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./localstorage.service\";\nexport class AuthInterceptorService {\n  constructor(storage) {\n    this.storage = storage;\n  }\n  intercept(req, next) {\n    if (req.url === ' http://127.0.0.1:8000/api/user/token') {\n      console.log(\"Header is not appended for getting token.\");\n      return next.handle(req);\n    }\n    const modifiedReq = req.clone({\n      headers: req.headers.append('Authorization', this.storage.get('token'))\n    });\n    cons;\n    return next.handle(modifiedReq);\n  }\n}\nAuthInterceptorService.ɵfac = function AuthInterceptorService_Factory(t) {\n  return new (t || AuthInterceptorService)(i0.ɵɵinject(i1.LocalStorageService));\n};\nAuthInterceptorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthInterceptorService,\n  factory: AuthInterceptorService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;AAOA,OAAM,MAAOA,sBAAsB;EAE/BC,YAAoBC,OAA4B;IAA5B,YAAO,GAAPA,OAAO;EAAwB;EAEnDC,SAAS,CAACC,GAAqB,EAAEC,IAAiB;IAE9C,IAAGD,GAAG,CAACE,GAAG,KAAG,uCAAuC,EAAE;MAClDC,OAAO,CAACC,GAAG,CAAC,2CAA2C,CAAC;MACxD,OAAOH,IAAI,CAACI,MAAM,CAACL,GAAG,CAAC;;IAG3B,MAAMM,WAAW,GAAGN,GAAG,CAACO,KAAK,CAAC;MAACC,OAAO,EAAER,GAAG,CAACQ,OAAO,CAACC,MAAM,CAAC,eAAe,EAAE,IAAI,CAACX,OAAO,CAACY,GAAG,CAAC,OAAO,CAAE;IAAC,CAAC,CAAC;IACzGC,IAAI;IAEJ,OAAOV,IAAI,CAACI,MAAM,CAACC,WAAW,CAAC;EAGnC;;AAjBSV,sBAAsB;mBAAtBA,sBAAsB;AAAA;AAAtBA,sBAAsB;SAAtBA,sBAAsB;EAAAgB,SAAtBhB,sBAAsB;EAAAiB,YADV;AAAM","names":["AuthInterceptorService","constructor","storage","intercept","req","next","url","console","log","handle","modifiedReq","clone","headers","append","get","cons","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Devil\\Desktop\\BlogApp\\frontend\\BlogApp\\src\\app\\auth-interceptor.service.ts"],"sourcesContent":["import { HttpEvent, HttpHandler, HttpHeaders, HttpInterceptor, HttpRequest } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { Observable } from \"rxjs\";\r\nimport { LocalStorageService } from \"./localstorage.service\";\r\n\r\n\r\n@Injectable({providedIn: 'root'})\r\nexport class AuthInterceptorService implements HttpInterceptor {\r\n\r\n    constructor(private storage: LocalStorageService) {}\r\n\r\n    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n\r\n        if(req.url===' http://127.0.0.1:8000/api/user/token') {\r\n            console.log(\"Header is not appended for getting token.\")\r\n            return next.handle(req);\r\n        }\r\n\r\n        const modifiedReq = req.clone({headers: req.headers.append('Authorization', this.storage.get('token')!)})\r\n        cons\r\n\r\n        return next.handle(modifiedReq);\r\n\r\n\r\n    }\r\n\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}