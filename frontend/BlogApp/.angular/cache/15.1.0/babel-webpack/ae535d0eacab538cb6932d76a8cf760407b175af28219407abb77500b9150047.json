{"ast":null,"code":"import { Subject, tap } from 'rxjs';\nimport { User } from './models/user.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./localstorage.service\";\nexport class AuthService {\n  constructor(http, storage) {\n    this.http = http;\n    this.storage = storage;\n    this.user = new Subject();\n    this.isLoggedIn = false;\n  }\n  tap() {}\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.LocalStorageService));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac\n});\nresData => {\n  const user = new User(resData.username, resData.email, resData.token);\n};\nsubscribe(resData => {\n  console.log(resData);\n  this.isLoggedIn = true;\n  this.user.next();\n  console.log('user is ' + this.isLoggedIn);\n});\nuserRegister(username, string, email, string, password, string);\n{\n  this.http.post('http://127.0.0.1:8000/api/user/create/', {\n    username,\n    email,\n    password\n  }).subscribe(userData => {\n    console.log('user created');\n  });\n  this.http.post('http://127.0.0.1:8000/api/user/token/', {\n    username,\n    password\n  }).pipe(tap(resData => {\n    const user = new User(resData.username, resData.email, resData.token);\n    this.user.next(user);\n  }));\n}\nuserLogout(username, string);\n{\n  this.isLoggedIn = false;\n  this.storage.remove(username);\n}","map":{"version":3,"mappings":"AAEA,SAAqBA,OAAO,EAAEC,GAAG,QAAQ,MAAM;AAE/C,SAASC,IAAI,QAAQ,qBAAqB;;;;AAG1C,OAAM,MAAOC,WAAW;EAEtBC,YAAoBC,IAAgB,EAAUC,OAA4B;IAAtD,SAAI,GAAJD,IAAI;IAAsB,YAAO,GAAPC,OAAO;IADrD,SAAI,GAAG,IAAIN,OAAO,EAAQ;IAG1B,eAAU,GAAG,KAAK;EAF2D;EAIvEC,GAAG,IAAC;;AANCE,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAI,SAAXJ,WAAW;AAAA;AAMXK,OAAa,IAAI;EACpB,MAAMC,IAAI,GAAG,IAAIP,IAAI,CAACM,OAAO,CAACE,QAAQ,EAAEF,OAAO,CAACG,KAAK,EAAEH,OAAO,CAACI,KAAK,CAAC;AACvE,CAAC;AAEFC,SAAS,CAAEL,OAAO,IAAI;EACrBM,OAAO,CAACC,GAAG,CAACP,OAAO,CAAC;EACpB,IAAI,CAACQ,UAAU,GAAG,IAAI;EACtB,IAAI,CAACP,IAAI,CAACQ,IAAI,EAAE;EAEhBH,OAAO,CAACC,GAAG,CAAC,UAAU,GAAG,IAAI,CAACC,UAAU,CAAC;AAC3C,CAAC,CAAC;AAGNE,YAAY,CAACR,QAAQ,EAAES,MAAM,EAAER,KAAK,EAAEQ,MAAM,EAAEC,QAAQ,EAAED,MAAM,CAAC;AAAC;EAC9D,IAAI,CAACd,IAAI,CACNgB,IAAI,CAAC,wCAAwC,EAAE;IAC9CX,QAAQ;IACRC,KAAK;IACLS;GACD,CAAC,CACDP,SAAS,CAAES,QAAQ,IAAI;IACtBR,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;EAC7B,CAAC,CAAC;EACJ,IAAI,CAACV,IAAI,CACNgB,IAAI,CAAC,uCAAuC,EAAE;IAAEX,QAAQ;IAAEU;EAAQ,CAAE,CAAC,CACrEG,IAAI,CACHtB,GAAG,CAAEO,OAAa,IAAI;IACpB,MAAMC,IAAI,GAAG,IAAIP,IAAI,CAACM,OAAO,CAACE,QAAQ,EAAEF,OAAO,CAACG,KAAK,EAAEH,OAAO,CAACI,KAAK,CAAC;IACrE,IAAI,CAACH,IAAI,CAACQ,IAAI,CAACR,IAAI,CAAC;EACtB,CAAC,CAAC,CACH;;AAGLe,UAAU,CAACd,QAAQ,EAAES,MAAM,CAAC;AAAC;EAC3B,IAAI,CAACH,UAAU,GAAG,KAAK;EACvB,IAAI,CAACV,OAAO,CAACmB,MAAM,CAACf,QAAQ,CAAC","names":["Subject","tap","User","AuthService","constructor","http","storage","factory","resData","user","username","email","token","subscribe","console","log","isLoggedIn","next","userRegister","string","password","post","userData","pipe","userLogout","remove"],"sourceRoot":"","sources":["C:\\Users\\Devil\\Desktop\\BlogApp\\frontend\\BlogApp\\src\\app\\auth.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { EventEmitter, Injectable } from '@angular/core';\r\nimport { catchError, Subject, tap } from 'rxjs';\r\nimport { LocalStorageService } from './localstorage.service';\r\nimport { User } from './models/user.model';\r\n\r\n@Injectable()\r\nexport class AuthService {\r\n  user = new Subject<User>();\r\n  constructor(private http: HttpClient, private storage: LocalStorageService) {}\r\n\r\n  isLoggedIn = false;\r\n\r\n        tap((resData: User) => {\r\n          const user = new User(resData.username, resData.email, resData.token);\r\n        })\r\n      )\r\n      .subscribe((resData) => {\r\n        console.log(resData);\r\n        this.isLoggedIn = true;\r\n        this.user.next();\r\n\r\n        console.log('user is ' + this.isLoggedIn);\r\n      });\r\n  }\r\n\r\n  userRegister(username: string, email: string, password: string) {\r\n    this.http\r\n      .post('http://127.0.0.1:8000/api/user/create/', {\r\n        username,\r\n        email,\r\n        password,\r\n      })\r\n      .subscribe((userData) => {\r\n        console.log('user created');\r\n      });\r\n    this.http\r\n      .post('http://127.0.0.1:8000/api/user/token/', { username, password })\r\n      .pipe(\r\n        tap((resData: User) => {\r\n          const user = new User(resData.username, resData.email, resData.token);\r\n          this.user.next(user);\r\n        })\r\n      );\r\n  }\r\n\r\n  userLogout(username: string) {\r\n    this.isLoggedIn = false;\r\n    this.storage.remove(username);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}