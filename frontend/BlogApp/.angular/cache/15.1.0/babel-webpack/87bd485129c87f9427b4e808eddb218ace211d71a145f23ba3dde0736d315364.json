{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./localstorage.service\";\nimport * as i2 from \"./auth.service\";\nexport class AuthInterceptorService {\n  constructor(storage, authService) {\n    this.storage = storage;\n    this.authService = authService;\n  }\n  intercept(req, next) {\n    if (req.url === 'http://127.0.0.1:8000/api/user/token/') {\n      // console.log(\"Header is not appended for getting token.\")\n      return next.handle(req);\n    } else {\n      // let string_response = this.storage.get('Token')!\n      // let value = string_response.slice(string_response.indexOf(\":\") + 2, string_response.length-2)\n      // value = \"Token \" + value\n      // let header = new HttpHeaders()\n      // header = header.set('Authorization', value);\n      console.log('Except for getting token, headers should be attached everywhere.');\n      this.authService.user.subscribe(userData => {\n        // console.log(userData.token)\n        let header = new HttpHeaders();\n        header = header.set('Authorization', 'Token' + userData.token);\n        console.log(header);\n        console.log(userData.token);\n        const modifiedReq = req.clone({\n          headers: header\n        });\n        console.log(modifiedReq);\n        return next.handle(modifiedReq);\n      });\n    }\n    ;\n    console.log('this code is also working');\n    return next.handle(req);\n  }\n}\nAuthInterceptorService.ɵfac = function AuthInterceptorService_Factory(t) {\n  return new (t || AuthInterceptorService)(i0.ɵɵinject(i1.LocalStorageService), i0.ɵɵinject(i2.AuthService));\n};\nAuthInterceptorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthInterceptorService,\n  factory: AuthInterceptorService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAAA,SAGEA,WAAW,QAGN,sBAAsB;;;;AAO7B,OAAM,MAAOC,sBAAsB;EACjCC,YACUC,OAA4B,EAC5BC,WAAwB;IADxB,YAAO,GAAPD,OAAO;IACP,gBAAW,GAAXC,WAAW;EAClB;EAEHC,SAAS,CACPC,GAAqB,EACrBC,IAAiB;IAEjB,IAAID,GAAG,CAACE,GAAG,KAAK,uCAAuC,EAAE;MACvD;MACA,OAAOD,IAAI,CAACE,MAAM,CAACH,GAAG,CAAC;KACxB,MAAM;MACL;MAEA;MACA;MACA;MAEA;MACAI,OAAO,CAACC,GAAG,CACT,kEAAkE,CACnE;MAED,IAAI,CAACP,WAAW,CAACQ,IAAI,CAACC,SAAS,CAAEC,QAAQ,IAAI;QAC3C;QACA,IAAIC,MAAM,GAAG,IAAIf,WAAW,EAAE;QAC9Be,MAAM,GAAGA,MAAM,CAACC,GAAG,CAAC,eAAe,EAAE,OAAO,GAAGF,QAAQ,CAACG,KAAK,CAAC;QAC9DP,OAAO,CAACC,GAAG,CAACI,MAAM,CAAC;QACnBL,OAAO,CAACC,GAAG,CAACG,QAAQ,CAACG,KAAK,CAAC;QAC3B,MAAMC,WAAW,GAAGZ,GAAG,CAACa,KAAK,CAAC;UAC5BC,OAAO,EAAEL;SAAO,CAAC;QAEnBL,OAAO,CAACC,GAAG,CAACO,WAAW,CAAC;QACxB,OAAOX,IAAI,CAACE,MAAM,CAACS,WAAW,CAAC;MAE/B,CAAC,CAAC;;IAEH;IACDR,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC;IAExC,OAAOJ,IAAI,CAACE,MAAM,CAACH,GAAG,CAAC;EACzB;;AA3CSL,sBAAsB;mBAAtBA,sBAAsB;AAAA;AAAtBA,sBAAsB;SAAtBA,sBAAsB;EAAAoB,SAAtBpB,sBAAsB;EAAAqB,YADT;AAAM","names":["HttpHeaders","AuthInterceptorService","constructor","storage","authService","intercept","req","next","url","handle","console","log","user","subscribe","userData","header","set","token","modifiedReq","clone","headers","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Devil\\Desktop\\BlogApp\\frontend\\BlogApp\\src\\app\\auth-interceptor.service.ts"],"sourcesContent":["import {\r\n  HttpEvent,\r\n  HttpHandler,\r\n  HttpHeaders,\r\n  HttpInterceptor,\r\n  HttpRequest,\r\n} from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { AuthService } from './auth.service';\r\nimport { LocalStorageService } from './localstorage.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AuthInterceptorService implements HttpInterceptor {\r\n  constructor(\r\n    private storage: LocalStorageService,\r\n    private authService: AuthService\r\n  ) {}\r\n\r\n  intercept(\r\n    req: HttpRequest<any>,\r\n    next: HttpHandler\r\n  ): Observable<HttpEvent<any>> {\r\n    if (req.url === 'http://127.0.0.1:8000/api/user/token/') {\r\n      // console.log(\"Header is not appended for getting token.\")\r\n      return next.handle(req);\r\n    } else {\r\n      // let string_response = this.storage.get('Token')!\r\n\r\n      // let value = string_response.slice(string_response.indexOf(\":\") + 2, string_response.length-2)\r\n      // value = \"Token \" + value\r\n      // let header = new HttpHeaders()\r\n\r\n      // header = header.set('Authorization', value);\r\n      console.log(\r\n        'Except for getting token, headers should be attached everywhere.'\r\n      );\r\n\r\n      this.authService.user.subscribe((userData) => {\r\n        // console.log(userData.token)\r\n        let header = new HttpHeaders()\r\n        header = header.set('Authorization', 'Token' + userData.token)\r\n        console.log(header)\r\n        console.log(userData.token);\r\n        const modifiedReq = req.clone({\r\n          headers: header});\r\n\r\n        console.log(modifiedReq);\r\n        return next.handle(modifiedReq);\r\n\r\n        });\r\n\r\n      };\r\n      console.log('this code is also working');\r\n\r\n      return next.handle(req);\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}