{"ast":null,"code":"\"use strict\";\n\n// import { HttpEvent, HttpHandler, HttpHeaders, HttpInterceptor, HttpRequest } from \"@angular/common/http\";\n// import { Injectable } from \"@angular/core\";\n// import { Observable } from \"rxjs\";\n// import { LocalStorageService } from \"./localstorage.service\";\n// @Injectable({providedIn: 'root'})\n// export class AuthInterceptorService implements HttpInterceptor {\n//     constructor(private storage: LocalStorageService) {}\n//     intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n//         if(req.url==='http://127.0.0.1:8000/api/user/token/') {\n//             console.log(\"Header is not appended for getting token.\")\n//             return next.handle(req);\n//         }\n//         else {\n//             const modifiedReq = req.clone({headers: req.headers.append('Authorization', this.storage.get('Token')!)})\n//             console.log(\"Except for getting token, headers should be attached everywhere.\")\n//             return next.handle(modifiedReq);\n//         }\n//     }\n// }","map":{"version":3,"mappings":";;AAAA;AACA;AACA;AACA;AAGA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAGA;AAGA;AAEA","names":[],"sourceRoot":"","sources":["C:\\Users\\Devil\\Desktop\\BlogApp\\frontend\\BlogApp\\src\\app\\auth-interceptor.service.ts"],"sourcesContent":["// import { HttpEvent, HttpHandler, HttpHeaders, HttpInterceptor, HttpRequest } from \"@angular/common/http\";\r\n// import { Injectable } from \"@angular/core\";\r\n// import { Observable } from \"rxjs\";\r\n// import { LocalStorageService } from \"./localstorage.service\";\r\n\r\n\r\n// @Injectable({providedIn: 'root'})\r\n// export class AuthInterceptorService implements HttpInterceptor {\r\n\r\n//     constructor(private storage: LocalStorageService) {}\r\n\r\n//     intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n\r\n//         if(req.url==='http://127.0.0.1:8000/api/user/token/') {\r\n//             console.log(\"Header is not appended for getting token.\")\r\n//             return next.handle(req);\r\n//         }\r\n\r\n//         else {\r\n\r\n//             const modifiedReq = req.clone({headers: req.headers.append('Authorization', this.storage.get('Token')!)})\r\n//             console.log(\"Except for getting token, headers should be attached everywhere.\")\r\n\r\n//             return next.handle(modifiedReq);\r\n\r\n\r\n//         }\r\n\r\n\r\n//     }\r\n\r\n// }"]},"metadata":{},"sourceType":"script","externalDependencies":[]}